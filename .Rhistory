lonlat=FALSE))
}
#Apply function to each row
schools_in_range_far_join$dist <- apply(schools_in_range_far_join,1,getDistance)
#Group by house and keep the min distance
houses_with_min_dist_far <- schools_in_range_far_join %>% group_by(X1) %>% summarise(min_dist_school = min(dist))
View(houses_with_min_dist_far)
houses_all_with_min_dist <- rbind(houses_with_min_dist, houses_with_min_dist_far)
houses_final <- inner_join(houses, houses_all_with_min_dist, by='X1')
houses_final <- houses_final %>% dplyr::select(-geometry)
View(houses_final)
write_csv(houses_final, 'data/resale-flat-prices/all_flats_updated.csv')
packages = c('sf', 'rgdal', 'tidyverse', 'qdapTools', 'spatstat', 'readr', 'raster')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
houses <- read_csv('data/resale-flat-prices/all_flats_updated.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
ogrListLayers(dsn='data/hawker-centres/hawker-centres-kml.kml')
hawkers <- readOGR(dsn='data/hawker-centres/hawker-centres-kml.kml', layer='HAWKERCENTRE')
hawkers_df <- hawkers@data
View(hawkers_df)
hawkers_sf <- st_as_sf(hawkers)
View(hawkers_sf)
hawkers_sf <- st_set_crs(hawkers_sf, 4326)
hawkers_sf <- st_transform(hawkers_sf, 3414)
View(hawkers_sf)
hawkers_buffer <- st_buffer(houses_sf, 1000)
hawkers_in_range <- st_intersection(hawkers_buffer, hawkers_sf)
hawkers_in_range <- st_intersection(hawkers_buffer, hawkers_sf)
#Get num of houses with hawkers in 1km
length(unique(hawkers_in_range$X1))
hawkers_buffer <- st_buffer(houses_sf, 2000)
hawkers_in_range <- st_intersection(hawkers_buffer, hawkers_sf)
hawkers_in_range <- st_intersection(hawkers_buffer, hawkers_sf)
#Get num of houses with hawkers in 1km
length(unique(hawkers_in_range$X1))
hawkers_coords <- as.data.frame(st_coordinates(hawkers_in_range))
hawkers_in_range$hawker_x <- hawkers_coords$X
hawkers_in_range$hawker_y <- hawkers_coords$Y
houses_coords <- as.data.frame(st_coordinates(houses_sf))
houses_coords$X1 <- houses_sf$X1
colnames(houses_coords) <- c("house_x", "house_y", "X1")
hawkers_in_range_join <- inner_join(hawkers_in_range, houses_coords, by="X1")
#Get distance now
#function to get euclidean distance between 2 points
getDistance <- function( df ){
return(pointDistance(c(df$house_x, df$house_y),
c(df$hawker_x, df$hawker_y),
lonlat=FALSE))
}
#Apply function to each row
hawkers_in_range_join$dist <- apply(hawkers_in_range_join,1,getDistance)
#Group by house and keep the min distance
houses_with_min_dist <- hawkers_in_range_join %>% group_by(X1) %>% summarise(min_dist_hawker = min(dist))
all_house_ids <- houses$X1
min_dist_found_ids <- houses_with_min_dist$X1
min_dist_not_found_ids <- setdiff(all_house_ids, min_dist_found_ids)
min_dist_not_found_sf <- houses_sf[houses_sf$X1 %in% min_dist_not_found_ids,]
hawkers_buffer_far <- st_buffer(min_dist_not_found_sf, 6000)
hawkers_buffer_far <- st_buffer(min_dist_not_found_sf, 6000)
hawkers_in_range_far <- st_intersection(hawkers_buffer_far, hawkers_sf)
hawkers_in_range_far <- st_intersection(hawkers_buffer_far, hawkers_sf)
length(unique(hawkers_in_range_far$X1))
hawkers_buffer_far <- st_buffer(min_dist_not_found_sf, 7000)
hawkers_buffer_far <- st_buffer(min_dist_not_found_sf, 7000)
hawkers_in_range_far <- st_intersection(hawkers_buffer_far, hawkers_sf)
length(unique(hawkers_in_range_far$X1))
hawkers_buffer_far <- st_buffer(min_dist_not_found_sf, 8000)
hawkers_in_range_far <- st_intersection(hawkers_buffer_far, hawkers_sf)
length(unique(hawkers_in_range_far$X1))
hawkers_buffer_far <- st_buffer(min_dist_not_found_sf, 9000)
hawkers_in_range_far <- st_intersection(hawkers_buffer_far, hawkers_sf)
hawkers_in_range_far <- st_intersection(hawkers_buffer_far, hawkers_sf)
length(unique(hawkers_in_range_far$X1))
hawkers_coords_far <- as.data.frame(st_coordinates(hawkers_in_range_far))
hawkers_in_range_far$hawker_x <- hawkers_coords_far$X
hawkers_in_range_far$hawker_y <- hawkers_coords_far$Y
houses_far_coords <- as.data.frame(st_coordinates(min_dist_not_found_sf))
colnames(houses_far_coords) <- c("house_x", "house_y", "X1")
houses_far_coords$X1 <- min_dist_not_found_sf$X1
colnames(houses_far_coords) <- c("house_x", "house_y", "X1")
hawkers_in_range_far_join <- inner_join(hawkers_in_range_far, houses_far_coords, by="X1")
#function to get euclidean distance between 2 points
getDistance <- function( df ){
return(pointDistance(c(df$house_x, df$house_y),
c(df$hawker_x, df$hawker_y),
lonlat=FALSE))
}
#Apply function to each row
hawkers_in_range_far_join$dist <- apply(hawkers_in_range_far_join,1,getDistance)
#Group by house and keep the min distance
houses_with_min_dist_far <- hawkers_in_range_far_join %>% group_by(X1) %>% summarise(min_dist_hawker = min(dist))
houses_all_with_min_dist <- rbind(houses_with_min_dist, houses_with_min_dist_far)
houses_final <- inner_join(houses, houses_all_with_min_dist, by='X1')
houses_final <- houses_final %>% dplyr::select(-geometry)
View(houses_final)
View(houses_final)
write_csv(houses_final, 'data/resale-flat-prices/all_flats_updated.csv')
houses <- read_csv('data/resale-flat-prices/all_flats_updated.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
houses <- read_csv('data/resale-flat-prices/all_flats_updated.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
ogrListLayers('data/mrtstation/lta-mrt-station-exit-kml.kml')
mrt <- readOGR(dsn='data/mrtstation/lta-mrt-station-exit-kml.kml',
layer='MRT_EXITS')
View(mrt)
mrts_sf <- st_as_sf(mrt)
View(mrts_sf)
mrts_sf <- st_set_crs(mrts_sf, 4326)
mrts_sf <- st_transform(mrts_sf, 3414)
mrts_buffer <- st_buffer(houses_sf, 2000)
mrts_in_range <- st_intersection(mrts_buffer, mrts_sf)
#Get num of houses with mrts in 2km
length(unique(mrts_in_range$X1))
mrts_buffer <- st_buffer(houses_sf, 1000)
mrts_in_range <- st_intersection(mrts_buffer, mrts_sf)
mrts_in_range <- st_intersection(mrts_buffer, mrts_sf)
#Get num of houses with mrts in 2km
length(unique(mrts_in_range$X1))
mrts_coords <- as.data.frame(st_coordinates(mrts_in_range))
mrts_in_range$mrt_x <- mrts_coords$X
mrts_in_range$mrt_y <- mrts_coords$Y
houses_coords <- as.data.frame(st_coordinates(houses_sf))
houses_coords$X1 <- houses_sf$X1
colnames(houses_coords) <- c("house_x", "house_y", "X1")
mrts_in_range_join <- inner_join(mrts_in_range, houses_coords, by="X1")
#Get distance now
#function to get euclidean distance between 2 points
getDistance <- function( df ){
return(pointDistance(c(df$house_x, df$house_y),
c(df$mrt_x, df$mrt_y),
lonlat=FALSE))
}
#Apply function to each row
mrts_in_range_join$dist <- apply(mrts_in_range_join,1,getDistance)
#Group by house and keep the min distance
houses_with_min_dist <- mrts_in_range_join %>% group_by(X1) %>% summarise(min_dist_mrt = min(dist))
all_house_ids <- houses$X1
min_dist_found_ids <- houses_with_min_dist$X1
min_dist_not_found_ids <- setdiff(all_house_ids, min_dist_found_ids)
min_dist_not_found_sf <- houses_sf[houses_sf$X1 %in% min_dist_not_found_ids,]
mrts_buffer_far <- st_buffer(min_dist_not_found_sf, 9000)
mrts_in_range_far <- st_intersection(mrts_buffer_far, mrts_sf)
mrts_in_range_far <- st_intersection(mrts_buffer_far, mrts_sf)
length(unique(mrts_in_range_far$X1))
mrts_buffer_far <- st_buffer(min_dist_not_found_sf, 7000)
mrts_in_range_far <- st_intersection(mrts_buffer_far, mrts_sf)
mrts_in_range_far <- st_intersection(mrts_buffer_far, mrts_sf)
length(unique(mrts_in_range_far$X1))
mrts_buffer_far <- st_buffer(min_dist_not_found_sf, 5000)
mrts_in_range_far <- st_intersection(mrts_buffer_far, mrts_sf)
mrts_in_range_far <- st_intersection(mrts_buffer_far, mrts_sf)
length(unique(mrts_in_range_far$X1))
mrts_buffer_far <- st_buffer(min_dist_not_found_sf, 6000)
length(unique(mrts_in_range_far$X1))
mrts_in_range_far <- st_intersection(mrts_buffer_far, mrts_sf)
mrts_in_range_far <- st_intersection(mrts_buffer_far, mrts_sf)
length(unique(mrts_in_range_far$X1))
mrts_coords_far <- as.data.frame(st_coordinates(mrts_in_range_far))
mrts_in_range_far$mrt_x <- mrts_coords_far$X
mrts_in_range_far$mrt_y <- mrts_coords_far$Y
houses_far_coords <- as.data.frame(st_coordinates(min_dist_not_found_sf))
houses_far_coords$X1 <- min_dist_not_found_sf$X1
colnames(houses_far_coords) <- c("house_x", "house_y", "X1")
mrts_in_range_far_join <- inner_join(mrts_in_range_far, houses_far_coords, by="X1")
#function to get euclidean distance between 2 points
getDistance <- function( df ){
return(pointDistance(c(df$house_x, df$house_y),
c(df$mrt_x, df$mrt_y),
lonlat=FALSE))
}
#Apply function to each row
mrts_in_range_far_join$dist <- apply(mrts_in_range_far_join,1,getDistance)
#Group by house and keep the min distance
houses_with_min_dist_far <- mrts_in_range_far_join %>% group_by(X1) %>% summarise(min_dist_mrt = min(dist))
houses_all_with_min_dist <- rbind(houses_with_min_dist, houses_with_min_dist_far)
houses_final <- inner_join(houses, houses_all_with_min_dist, by='X1')
houses_final <- houses_final %>% dplyr::select(-geometry)
View(houses_final)
write_csv(houses_final, 'data/resale-flat-prices/all_flats_updated.csv')
packages = c('sf', 'rgdal', 'tidyverse', 'qdapTools', 'spatstat', 'readr', 'raster')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
houses <- read_csv('data/resale-flat-prices/all_flats_updated.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
hawkers <- readOGR(dsn='data/busstop' layer='busStop')
busStop <- readOGR(dsn='data/busstop' layer='busStop')
busStop <- readOGR(dsn='data/busstop', layer='busStop')
busStop <- st_read(dsn='data/busstop', layer='busStop')
View(busStop)
View(houses_sf)
summary(busStop)
busStops_sf <- st_read(dsn='data/busstop', layer='busStop')
busStops_sf <- st_set_crs(busStops_sf, 4326)
busStops_sf <- st_transform(busStops_sf, 3414)
View(busStops_sf)
st_crs(busStop_sf)
st_crs(busStops_sf)
busStops_sf <- st_read(dsn='data/busstop', layer='busStop')
st_crs(busStops_sf)
busStops_sf <- st_read(dsn='data/busstop', layer='busStop')
busStops_sf <- st_set_crs(busStops_sf, 3857)
busStops_sf <- st_transform(busStops_sf, 3414)
busStops_sf <- st_transform(busStops_sf, 3857)
busStops_sf <- st_read(dsn='data/busstop', layer='busStop')
busStops_sf <- st_transform(busStops_sf, 3857)
busStops_sf <- st_transform(busStops_sf, 3414)
busStops_sf <- st_transform(busStops_sf, 3414)
View(busStops_sf)
View(busStop)
View(houses_sf)
busStops_sf <- st_read(dsn='data/BusStopLocation_Jan2019/', layer='busStop')
busStops_sf <- st_read(dsn='data/BusStopLocation_Jan2019/', layer='busStop')
busStops_sf <- st_read(dsn='data/busstop//', layer='busStop')
busStops_sf <- st_read(dsn='data/busstop/', layer='busStop')
setwd("C:/IS415/Project/geospatial_analytics")
busStops_sf <- st_read(dsn='data/busstop/', layer='busStop')
busStops_sf <- readOGR(dsn='data/busstop/', layer='busStop')
busStops_sf <- st_read(dsn='data/busstop/', layer='busStop')
busStops_sf <- st_read(dsn='data/busstop/', layer='busStop')
packages = c('sf', 'rgdal', 'tidyverse', 'qdapTools', 'spatstat', 'readr', 'raster')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
busStops_sf <- st_read(dsn='data/busstop/', layer='busStop')
busStops_sf <- st_read(dsn='data/busstop/BusStop', layer='busStop')
ogrListLayers('data/busstop')
busStops_sf <- readOGR(dsn='data/busstop', layer='BusStop')
View(busStops_sf)
busStops <- readOGR(dsn='data/busstop', layer='BusStop')
busStops_sf <- st_as_sf(busStops)
View(busStops_sf)
packages = c('sf', 'rgdal', 'tidyverse', 'qdapTools', 'spatstat', 'readr', 'raster')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
houses <- read_csv('data/resale-flat-prices/all_flats_updated.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
ogrListLayers(dsn='data/singapore-police-force-establishment/singapore-police-force-establishments-2018-kml.kml')
hawkers <- readOGR(dsn='data/singapore-police-force-establishment/singapore-police-force-establishments-2018-kml.kml'), layer='SPF_ESTABLISHMENTS_2018')
hawkers <- readOGR(dsn='data/singapore-police-force-establishment/singapore-police-force-establishments-2018-kml.kml', layer='SPF_ESTABLISHMENTS_2018')
spf <- readOGR(dsn='data/singapore-police-force-establishment/singapore-police-force-establishments-2018-kml.kml', layer='SPF_ESTABLISHMENTS_2018')
spfs_sf <- st_as_sf(spfs)
spf`s <- readOGR(dsn='data/singapore-police-force-establishment/singapore-police-force-establishments-2018-kml.kml', layer='SPF_ESTABLISHMENTS_2018')
spfs <- readOGR(dsn='data/singapore-police-force-establishment/singapore-police-force-establishments-2018-kml.kml', layer='SPF_ESTABLISHMENTS_2018')
spfs <- readOGR(dsn='data/singapore-police-force-establishment/singapore-police-force-establishments-2018-kml.kml', layer='SPF_ESTABLISHMENTS_2018')
spfs_sf <- st_as_sf(spfs)
packages = c('sf', 'rgdal', 'tidyverse', 'qdapTools', 'spatstat', 'readr', 'raster')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
packages = c('sf', 'rgdal', 'tidyverse', 'qdapTools', 'spatstat', 'readr', 'raster')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
houses <- read_csv('data/resale-flat-prices/all_flats_updated.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
ogrListLayers(dsn='data/singapore-police-force-establishment/singapore-police-force-establishments-2018-kml.kml')
spfs <- readOGR(dsn='data/singapore-police-force-establishment/singapore-police-force-establishments-2018-kml.kml', layer='SPF_ESTABLISHMENTS_2018')
spfs_sf <- st_as_sf(spfs)
View(spfs_sf)
spfs_sf <- st_set_crs(spfs_sf, 4326)
spfs_sf <- st_transform(spfs_sf, 3414)
View(spfs_sf)
spfs_buffer <- st_buffer(houses_sf, 1000)
spfs_in_range <- st_intersection(spfs_buffer, spfs_sf)
#Get num of houses with spfs in 2km
length(unique(spfs_in_range$X1))
spfs_buffer <- st_buffer(houses_sf, 2000)
spfs_in_range <- st_intersection(spfs_buffer, spfs_sf)
#Get num of houses with spfs in 2km
length(unique(spfs_in_range$X1))
spfs_coords <- as.data.frame(st_coordinates(spfs_in_range))
spfs_in_range$spf_x <- spfs_coords$X
spfs_in_range$spf_y <- spfs_coords$Y
houses_coords <- as.data.frame(st_coordinates(houses_sf))
houses_coords$X1 <- houses_sf$X1
colnames(houses_coords) <- c("house_x", "house_y", "X1")
spfs_in_range_join <- inner_join(spfs_in_range, houses_coords, by="X1")
#Get distance now
#function to get euclidean distance between 2 points
getDistance <- function( df ){
return(pointDistance(c(df$house_x, df$house_y),
c(df$spf_x, df$spf_y),
lonlat=FALSE))
}
#Apply function to each row
spfs_in_range_join$dist <- apply(spfs_in_range_join,1,getDistance)
#Group by house and keep the min distance
houses_with_min_dist <- spfs_in_range_join %>% group_by(X1) %>% summarise(min_dist_spf = min(dist))
all_house_ids <- houses$X1
min_dist_found_ids <- houses_with_min_dist$X1
min_dist_not_found_ids <- setdiff(all_house_ids, min_dist_found_ids)
min_dist_not_found_sf <- houses_sf[houses_sf$X1 %in% min_dist_not_found_ids,]
spfs_buffer_far <- st_buffer(min_dist_not_found_sf, 3000)
spfs_in_range_far <- st_intersection(spfs_buffer_far, spfs_sf)
length(unique(spfs_in_range_far$X1))
spfs_buffer_far <- st_buffer(min_dist_not_found_sf, 5000)
spfs_in_range_far <- st_intersection(spfs_buffer_far, spfs_sf)
length(unique(spfs_in_range_far$X1))
spfs_buffer_far <- st_buffer(min_dist_not_found_sf, 6000)
spfs_in_range_far <- st_intersection(spfs_buffer_far, spfs_sf)
length(unique(spfs_in_range_far$X1))
spfs_coords_far <- as.data.frame(st_coordinates(spfs_in_range_far))
spfs_in_range_far$spf_x <- spfs_coords_far$X
spfs_in_range_far$spf_y <- spfs_coords_far$Y
houses_far_coords <- as.data.frame(st_coordinates(min_dist_not_found_sf))
houses_far_coords$X1 <- min_dist_not_found_sf$X1
colnames(houses_far_coords) <- c("house_x", "house_y", "X1")
spfs_in_range_far_join <- inner_join(spfs_in_range_far, houses_far_coords, by="X1")
#function to get euclidean distance between 2 points
getDistance <- function( df ){
return(pointDistance(c(df$house_x, df$house_y),
c(df$spf_x, df$spf_y),
lonlat=FALSE))
}
#Apply function to each row
spfs_in_range_far_join$dist <- apply(spfs_in_range_far_join,1,getDistance)
#Group by house and keep the min distance
houses_with_min_dist_far <- spfs_in_range_far_join %>% group_by(X1) %>% summarise(min_dist_spf = min(dist))
houses_all_with_min_dist <- rbind(houses_with_min_dist, houses_with_min_dist_far)
houses_final <- inner_join(houses, houses_all_with_min_dist, by='X1')
houses_final <- houses_final %>% dplyr::select(-geometry)
View(houses_final)
View(houses_final)
write_csv(houses_final, 'data/resale-flat-prices/all_flats_updated.csv')
packages = c('sf', 'rgdal', 'tidyverse', 'qdapTools', 'spatstat', 'readr', 'raster')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
houses <- read_csv('data/resale-flat-prices/all_flats_updated.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
ogrListLayers(dsn='data/preschool/pre-schools-location-kml.kml')
preschools <- readOGR(dsn='data/preschool/pre-schools-location-kml.kml', layer='PRESCHOOLS_LOCATION')
preschools_sf <- st_as_sf(preschools)
View(preschools_sf)
preschools_sf <- st_set_crs(preschools_sf, 4326)
preschools_sf <- st_transform(preschools_sf, 3414)
preschools_buffer <- st_buffer(houses_sf, 2000)
preschools_in_range <- st_intersection(preschools_buffer, preschools_sf)
preschools_in_range <- st_intersection(preschools_buffer, preschools_sf)
preschools_buffer <- st_buffer(houses_sf, 500)
preschools_in_range <- st_intersection(preschools_buffer, preschools_sf)
preschools_in_range <- st_intersection(preschools_buffer, preschools_sf)
#Get num of houses with preschools in 2km
length(unique(preschools_in_range$X1))
preschools_coords <- as.data.frame(st_coordinates(preschools_in_range))
preschools_in_range$preschool_x <- preschools_coords$X
preschools_in_range$preschool_y <- preschools_coords$Y
houses_coords <- as.data.frame(st_coordinates(houses_sf))
houses_coords$X1 <- houses_sf$X1
colnames(houses_coords) <- c("house_x", "house_y", "X1")
preschools_in_range_join <- inner_join(preschools_in_range, houses_coords, by="X1")
#Get distance now
#function to get euclidean distance between 2 points
getDistance <- function( df ){
return(pointDistance(c(df$house_x, df$house_y),
c(df$preschool_x, df$preschool_y),
lonlat=FALSE))
}
#Apply function to each row
preschools_in_range_join$dist <- apply(preschools_in_range_join,1,getDistance)
#Group by house and keep the min distance
houses_with_min_dist <- preschools_in_range_join %>% group_by(X1) %>% summarise(min_dist_preschool = min(dist))
all_house_ids <- houses$X1
min_dist_found_ids <- houses_with_min_dist$X1
min_dist_not_found_ids <- setdiff(all_house_ids, min_dist_found_ids)
min_dist_not_found_sf <- houses_sf[houses_sf$X1 %in% min_dist_not_found_ids,]
preschools_buffer_far <- st_buffer(min_dist_not_found_sf, 1000)
preschools_in_range_far <- st_intersection(preschools_buffer_far, preschools_sf)
length(unique(preschools_in_range_far$X1))
preschools_buffer_far <- st_buffer(min_dist_not_found_sf, 3000)
preschools_in_range_far <- st_intersection(preschools_buffer_far, preschools_sf)
length(unique(preschools_in_range_far$X1))
preschools_buffer_far <- st_buffer(min_dist_not_found_sf, 6000)
preschools_buffer_far <- st_buffer(min_dist_not_found_sf, 5000)
preschools_in_range_far <- st_intersection(preschools_buffer_far, preschools_sf)
preschools_in_range_far <- st_intersection(preschools_buffer_far, preschools_sf)
length(unique(preschools_in_range_far$X1))
preschools_buffer_far <- st_buffer(min_dist_not_found_sf, 4000)
preschools_in_range_far <- st_intersection(preschools_buffer_far, preschools_sf)
length(unique(preschools_in_range_far$X1))
preschools_buffer_far <- st_buffer(min_dist_not_found_sf, 5000)
preschools_in_range_far <- st_intersection(preschools_buffer_far, preschools_sf)
length(unique(preschools_in_range_far$X1))
preschools_coords_far <- as.data.frame(st_coordinates(preschools_in_range_far))
preschools_in_range_far$preschool_x <- preschools_coords_far$X
preschools_in_range_far$preschool_y <- preschools_coords_far$Y
houses_far_coords <- as.data.frame(st_coordinates(min_dist_not_found_sf))
houses_far_coords$X1 <- min_dist_not_found_sf$X1
colnames(houses_far_coords) <- c("house_x", "house_y", "X1")
preschools_in_range_far_join <- inner_join(preschools_in_range_far, houses_far_coords, by="X1")
#function to get euclidean distance between 2 points
getDistance <- function( df ){
return(pointDistance(c(df$house_x, df$house_y),
c(df$preschool_x, df$preschool_y),
lonlat=FALSE))
}
#Apply function to each row
preschools_in_range_far_join$dist <- apply(preschools_in_range_far_join,1,getDistance)
#Group by house and keep the min distance
houses_with_min_dist_far <- preschools_in_range_far_join %>% group_by(X1) %>% summarise(min_dist_preschool = min(dist))
houses_all_with_min_dist <- rbind(houses_with_min_dist, houses_with_min_dist_far)
write_csv(houses_final, 'data/resale-flat-prices/all_flats_updated.csv')
houses_all_with_min_dist <- rbind(houses_with_min_dist, houses_with_min_dist_far)
houses_final <- inner_join(houses, houses_all_with_min_dist, by='X1')
houses_final <- houses_final %>% dplyr::select(-geometry)
View(houses_final)
write_csv(houses_final, 'data/resale-flat-prices/all_flats_updated.csv')
packages = c('sf', 'rgdal', 'tidyverse', 'qdapTools', 'spatstat', 'readr', 'raster')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
houses <- read_csv('data/resale-flat-prices/all_flats_updated.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
taxis <- st_read(dsn='data/taxistand/TaxiStop')
ogrListLayers(dsn='data/taxistand/TaxiStop')
ogrListLayers(dsn='data/taxistand')
taxis <- readOGR(dsn='data/taxistand', layer='TaxiStop')
packages = c('sf', 'rgdal', 'tidyverse', 'qdapTools', 'spatstat', 'readr', 'raster')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
houses <- read_csv('data/resale-flat-prices/all_flats_updated.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
taxis <- readOGR(dsn='data/taxistand', layer='TaxiStop')
View(taxis)
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
taxis_sf <- st_as_sf(taxis)
View(taxis_sf)
st_crs(taxis_sf)
taxis_sf <- st_set_crs(taxis_sf, 4757)
taxis_sf <- st_transform(taxis_sf, 4757)
st_crs(taxis_sf)
taxis_sf <- st_transform(taxis_sf, 3414)
taxis_sf <- st_as_sf(taxis)
taxis_sf <- st_transform(taxis_sf, 4757)
taxis_sf <- st_set_crs(taxis_sf, 4326)
st_crs(taxis_sf)
taxis_sf <- st_transform(taxis_sf, 3414)
plot(taxis_sf)
ogrListLayers(dsn='data/taxistand')
taxis <- readOGR(dsn='data/taxistand', layer='TaxiStop')
taxis_sf <- st_as_sf(taxis)
st_crs(taxis_sf)
taxis_sf <- st_set_crs(taxis_sf, 4326)
taxis_sf <- st_transform(taxis_sf, 3414)
GDALinfo(taxis_sf)
GDALinfo()
taxis_sf <- st_as_sf(taxis)
proj4string(taxis_sf) <- CRS("+init=epsg:3757")
st_crs(taxis_sf) <- CRS("+init=epsg:3757")
st_crs(taxis_sf) <- 3757
st_crs(taxis_sf) <- 4757
taxis_sf <- st_transform(taxis_sf, 3414)
taxis_sf <- st_as_sf(taxis)
summary(taxis_sf)
proj4string(as(taxis_sf, 'Spatial'))
proj4string(as(houses_sf, 'Spatial'))
st_crs(as(houses_sf, 'Spatial'))
st_crs(houses_sf, 'Spatial')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
st_crs(houses_sf, 'Spatial')
