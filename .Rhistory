#install.packages('tibble', dependencies = TRUE)
#install.packages('tidyverse', dependencies = TRUE)
#library(tidyverse)
library(sf)
library(tmap)
library(tmaptools)
houses <- read_csv('data/resale-flat-prices/finalCSVforplots.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
mpsz <- readOGR(dsn='data/mpsz', layer='MP14_SUBZONE_WEB_PL')
mpsz_sf <- st_as_sf(mpsz)
#Color 1 subzone
houses_agg <- houses_sf %>% group_by(SUBZONE_N) %>% summarise(mean_dist=mean(min_dist_clinic))
packages = c('ggmap', 'rgdal','qdapTools', 'spatstat', 'readr', 'dplyr', 'sf', 'tmap','tmaptools')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
# remove.packages(c("tmaptools", "tmap", "sf"))
# install.packages('sf', dependencies = TRUE)
# install.packages('tmap', dependencies = TRUE)
# install.packages('tmaptools', dependencies = TRUE)
#remove.packages(c("tidyverse", "tibble"))
#install.packages('tibble', dependencies = TRUE)
#install.packages('tidyverse', dependencies = TRUE)
#library(tidyverse)
houses <- read_csv('data/resale-flat-prices/finalCSVforplots.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
mpsz <- readOGR(dsn='data/mpsz', layer='MP14_SUBZONE_WEB_PL')
mpsz_sf <- st_as_sf(mpsz)
#Color 1 subzone
houses_agg <- houses_sf %>% group_by(SUBZONE_N) %>% summarise(mean_dist=mean(min_dist_clinic))
houses_agg <- houses_agg[order(houses_agg$mean_dist),][c(1:10),]
ggplot(houses_agg, aes(x = reorder(SUBZONE_N, mean_dist),
y = mean_dist,
fill=ifelse(SUBZONE_N=="BUGIS","Highlight","Normal"))) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.title = element_blank(),
legend.position = "none") +
labs(x = "Subzone", y = "Mean distance")
#Color 1 subzone
houses_agg <- houses_sf %>% group_by(SUBZONE_N) %>% summarise(mean_dist=mean(min_dist_clinic))
houses_agg <- houses_agg[order(houses_agg$mean_dist),][c(1:10),]
ggplot(houses_agg, aes(x = reorder(SUBZONE_N, mean_dist),
y = mean_dist,
fill=ifelse(SUBZONE_N=="BUGIS","Highlight","Normal"))) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.title = element_blank(),
legend.position = "none") +
labs(x = "Subzone", y = "Mean distance") +
scale_fill_manual(values = c('#595959', 'red'))
ggplot(houses_agg, aes(x = reorder(SUBZONE_N, mean_dist),
y = mean_dist,
fill=ifelse(SUBZONE_N=="BUGIS","Highlight","Normal"))) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.title = element_blank(),
legend.position = "none") +
labs(x = "Subzone", y = "Mean distance") +
scale_fill_manual(values = c('red', '#595959'))
ggplot(houses_agg, aes(x = reorder(SUBZONE_N, mean_dist),
y = mean_dist,
fill=ifelse(SUBZONE_N=="BUGIS","Highlight","Normal"))) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.title = element_blank(),
legend.position = "none") +
labs(x = "Subzone", y = "Mean distance") +
scale_fill_manual(values = c('red', 'blue'))
ggplot(houses_agg, aes(x = reorder(SUBZONE_N, mean_dist),
y = mean_dist,
fill=ifelse(SUBZONE_N=="BUGIS","Highlight","Normal"))) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.title = element_blank(),
legend.position = "none") +
labs(x = "Subzone", y = "Mean distance") +
scale_fill_manual(values = c('red', 'skyblue'))
ggplot(houses_agg, aes(x = reorder(SUBZONE_N, mean_dist),
y = mean_dist,
fill=ifelse(SUBZONE_N=="BUGIS","Highlight","Normal"))) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),
legend.title = element_blank(),
legend.position = "none") +
labs(x = "Subzone", y = "Mean distance") +
scale_fill_manual(values = c('orangered', 'skyblue'))
ogrListLayers(dsn='data/mp_region/MP14_REGION_WEB_PL.kml')
mpr <- readOGR(dsn='data/mp_region/MP14_REGION_WEB_PL.kml', layer='MP14_REGION_WEB_PL')
mpr_sf <- st_as_sf(mpr)
View(mpr_sf)
houses <- read_csv('data/resale-flat-prices/finalCSVforplots.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
tm_shape(mpr[mpr$NAME=="NORTH REGION",]) + tm_polygons() +
tm_shape(houses_sf[houses_sf$REGION_N=="NORTH REGION", ]) +
tm_dots(col='min_dist_clinic',
style='quantile',
size=0.1)
tm_shape(mpr[mpr$NAME=="NORTH REGION",]) + tm_polygons()
tm_shape(mpr) + tm_polygons()
tm_shape(mpr[mpr$Name=="NORTH REGION",]) + tm_polygons()
tmode_plot("view")
tm_shape(mpr[mpr$Name=="NORTH REGION",]) + tm_polygons() +
tm_shape(houses_sf[houses_sf$REGION_N=="NORTH REGION", ]) +
tm_dots(col='min_dist_clinic',
style='quantile',
size=0.1)
tmap_mode("view")
tm_shape(mpr[mpr$Name=="NORTH REGION",]) + tm_polygons() +
tm_shape(houses_sf[houses_sf$REGION_N=="NORTH REGION", ]) +
tm_dots(col='min_dist_clinic',
style='quantile',
size=0.1)
ogrListLayers(dsn='data/mp_planning_area/MP14_PLNG_AREA_WEB_PL.kml')
mpa <- readOGR(dsn='data/mp_planning_area/MP14_PLNG_AREA_WEB_PL.kml', layer='MP14_PLNG_AREA_WEB_PL')
mpa <- readOGR(dsn='data/mp_planning_area/MP14_PLNG_AREA_WEB_PL.kml', layer='MP14_PLNG_AREA_WEB_PL')
mpa_sf <- st_as_sf(mpa)
houses <- read_csv('data/resale-flat-prices/finalCSVforplots.csv')
houses <- read_csv('data/resale-flat-prices/finalCSVforplots.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
View(mpa)
tmap_mode("view")
tm_shape(mpa[mpa$Name=="BISHAN",]) + tm_polygons() +
tm_shape(houses_sf[houses_sf$PLN_AREA_N=="BISHAN", ]) +
tm_dots(col='min_dist_clinic',
style='quantile',
size=0.1)
tmap_mode('view')
tm_shape(mpr[mpr$Name=="NORTH REGION",]) + tm_polygons() +
tm_shape(houses_sf[houses_sf$REGION_N=="NORTH REGION", ]) +
tm_dots(col='min_dist_clinic',
style='quantile',
size=0.1) +
tm_shape(houses_sf[houses_sf$REGION_N=="NORTH REGION", ]) +
tm_bubbles(size=0.05)
packages = c('ggmap', 'rgdal','qdapTools', 'spatstat', 'readr', 'dplyr', 'sf', 'tmap','tmaptools')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
ogrListLayers(dsn='data/mp_region/MP14_REGION_WEB_PL.kml')
mpr <- readOGR(dsn='data/mp_region/MP14_REGION_WEB_PL.kml', layer='MP14_REGION_WEB_PL')
mpr_sf <- st_as_sf(mpr)
houses <- read_csv('data/resale-flat-prices/finalCSVforplots.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
tmap_mode("view")
tm_shape(mpr[mpr$Name=="NORTH REGION",]) + tm_polygons() +
tm_shape(houses_sf[houses_sf$REGION_N=="NORTH REGION", ]) +
tm_dots(col='min_dist_clinic',
style='quantile',
size=0.1)
tmap_mode('view')
tm_shape(mpr[mpr$Name=="NORTH REGION",]) + tm_polygons() +
tm_shape(houses_sf[houses_sf$REGION_N=="NORTH REGION", ]) +
tm_dots(col='min_dist_clinic',
style='quantile',
size=0.1) +
tm_shape(houses_sf[houses_sf$REGION_N=="NORTH REGION", ]) +
tm_bubbles(size=0.05)
tm_shape(mpr[mpr$Name=="NORTH REGION",]) + tm_polygons() +
tm_shape(houses_sf[houses_sf$REGION_N=="NORTH REGION", ]) +
tm_dots(col='min_dist_clinic',
style='quantile',
size=0.1) +
tm_shape(houses_sf[houses_sf$REGION_N=="NORTH REGION", ]) +
tm_dots(size=0.05)
clinics <- read_csv('data/clinics/clinics.csv')
clinics_sf <- st_as_sf(clinics, coords=c("lon", "lat"))
tm_shape(mpr[mpr$Name=="NORTH REGION",]) + tm_polygons() +
tm_shape(houses_sf[houses_sf$REGION_N=="NORTH REGION", ]) +
tm_dots(col='min_dist_clinic',
style='quantile',
size=0.1) +
tm_shape(clinics_sf[clinics_sf$REGION_N=="NORTH REGION", ]) +
tm_dots(size=0.05)
tmap_mode('view')
tm_shape(mpa[mpa$Name=="BISHAN",]) + tm_polygons() +
tm_shape(houses_sf[houses_sf$PLN_AREA_N=="BISHAN", ]) +
tm_dots(col='min_dist_clinic',
style='quantile',
size=0.1)+
tm_shape(clinics_sf[clinics_sf$PLN_AREA_N=="BISHAN", ]) +
tm_dots(size=0.05)
spfs <- read_csv('data/singapore-police-force-establishment/spf.csv')
spfs %>% select(-c(Description))
spfs %>% select(Name, desc, everything())
spfs <- spfs %>% select(Name, desc, everything())
View(spfs)
spfs <- spfs %>% select(-c(Description))
spfs <- spfs %>% select(Name, desc, everything())
write_csv(spfs, 'data/singapore-police-force-establishment/spf.csv')
library(dict)
d <- dict()
install.packages('dict')
library(dict)
foo <- vector(mode="list", length=2)
names(foo) <- c("busStop", "list")
busStop <- read_csv('data/busStops/bus-stops.csv')
schools <- read_csv('data/schools/schools.csv')
foo[[1]] <- busStop
foo[[2]] <- schools
foo['busStop']
input <= 'BusStop'
input <- 'BusStop'
head(foo[input])
input <- 'busStop'
head(foo[input])
input <- 'schools'
head(foo[input])
names(foo) <- c("busStop", "schools")
input <- 'schools'
head(foo[input])
str(foo)
str(foo[input])
str(foo[input][1])
str(foo[input][0])
str(foo[input][1])
string(foo[input][1])
str(foo[input][1])
yo <- paste( unlist(foo[input][1]), collapse='')
foo[[1]] <- 'busStop'
foo[[1]] <- 'busStop'
foo[[1]] <- 'busStop'
foo[[2]] <- 'schools'
input <- 'schools'
yo <- paste( unlist(foo[input][1]), collapse='')
yo <- paste( unlist(foo[input]), collapse='')
yo <- unlist(foo[input])
foo[[1]] <- busStop
foo[[2]] <- schools
yo <- unlist(foo[input])
yo <- unlist(foo[[1]])
yo <- unlist(foo[input])
yo <- as.data.frame(unlist(foo[input]))
View(yo)
head(yo)
yo <- foo[input]
head(yo)
tm_shape(yo)+ tm_dots()
tm_shape(as.data.frame(yo))+ tm_dots()
tm_shape(st_as_sf(yo)) + tm_dots()
tm_shape(busStop) + tm_dots()
busStop_sf <- st_as_sf(busStop, coords=c("lon", "lat"))
input <- 'busStop'
yo <- foo[input]
tm_shape(busStop_sf) + tm_dots()
tmap_mode("plot")
tm_shape(yo) + tm_dots()
yo <- unlist(foo[[1]])
tm_shape(yo) + tm_dots()
head(yo)
yo <- foo[input][[1]]
tm_shape(yo) + tm_dots()
foo[[1]] <- busStop_sf
yo <- foo[input][[1]]
tm_shape(yo) + tm_dots()
tm_shape(yo[yo$REGION_N=="NORTH REGION"]) + tm_dots()
tm_shape(yo[yo$REGION_N=="NORTH REGION", ]) + tm_dots()
houses_sf <- read_csv('data/resale-flat-prices/finalCSVforplots.csv')
houses <- read_csv('data/resale-flat-prices/finalCSVforplots.csv')
View(houses)
houses_all <- read_csv('data/resale-flat-prices/all_flats.csv')
houses_all$address
View(houses_all)
shiny::runApp()
##Load Data into R
mpsz <- readOGR(dsn='data/mpsz', layer='MP14_SUBZONE_WEB_PL')
houses <- read.csv('data/resale-flat-prices/all_flats.csv')
busStops <- readOGR(dsn='data/BusStop', layer='BusStop')
parks <- st_read(dsn='data/parks', layer='NATIONALPARKS')
busStops <- readOGR(dsn='data/BusStop', layer='BusStop')
runApp()
houses_agg <- houses_sf %>% group_by(SUBZONE_N) %>% summarise(n())
houses_agg <- houses_sf %>% group_by(SUBZONE_N) %>% summarise(count = n())
houses_agg <- houses_sf %>% group_by(SUBZONE_N) %>% summarise(count = n(), REGION_N = REGION_N)
houses_agg <- houses_sf %>% group_by(SUBZONE_N) %>% summarise(count = n(), REGION_N = sample(REGION_N,1)
houses_agg <- houses_sf %>% group_by(SUBZONE_N) %>% summarise(count = n(), REGION_N = sample(REGION_N,1))
houses_agg <- houses_sf %>% group_by(SUBZONE_N) %>% summarise(count = n(), REGION_N = sample(REGION_N,1))
tm_shape(houses_agg) +
tm_fill("count",
style = "quantile",
palette = "Blues",
thres.poly = 0) +
tm_facets(by="REGION_N",
free.coords=TRUE,
drop.shapes=TRUE) +
tm_layout(legend.show = FALSE,
title.position = c("center", "center"),
title.size = 20) +
tm_borders(alpha = 0.5)
View(houses_agg)
View(houses)
View(houses_sf)
View(mpsz)
mpsz_data <- mpsz@data
left_join(mpsz_data, houses_agg)
mpsz_count <- left_join(mpsz_data, houses_agg)
mpsz_count$count[is.na(mpsz_count$count)] <- 0
tm_shape(mpsz_count) +
tm_fill("count",
style = "quantile",
palette = "Blues",
thres.poly = 0) +
tm_facets(by="REGION_N",
free.coords=TRUE,
drop.shapes=TRUE) +
tm_layout(legend.show = FALSE,
title.position = c("center", "center"),
title.size = 20) +
tm_borders(alpha = 0.5)
mpsz_sf <- st_as_sf(mpsz_count)
View(mpsz_count)
mpsz@data <- mpsz_count
tm_shape(mpsz) +
tm_fill("count",
style = "quantile",
palette = "Blues",
thres.poly = 0) +
tm_facets(by="REGION_N",
free.coords=TRUE,
drop.shapes=TRUE) +
tm_layout(legend.show = FALSE,
title.position = c("center", "center"),
title.size = 20) +
tm_borders(alpha = 0.5)
tm_shape(mpsz) +
tm_fill("count",
style = "quantile",
palette = "Blues",
thres.poly = 0) +
tm_layout(legend.show = FALSE,
title.position = c("center", "center"),
title.size = 20) +
tm_borders(alpha = 0.5)
tmap_mode("view")
tm_shape(mpsz) +
tm_fill("count",
style = "quantile",
palette = "Blues",
thres.poly = 0) +
tm_layout(legend.show = FALSE,
title.position = c("center", "center"),
title.size = 20) +
tm_borders(alpha = 0.5)
runApp()
houses_agg <- busStop_sf %>% group_by(SUBZONE_N) %>% summarise(count = n(), REGION_N = sample(REGION_N,1))
houses_agg <- busStop_sf %>% group_by(SUBZONE_N) %>% summarise(count = n(),
houses_agg <- busStop_sf %>% group_by(SUBZONE_N) %>% summarise(count = n())
mpsz_data <- mpsz@data
mpsz_count <- left_join(mpsz_data, houses_agg)
mpsz_data <- mpsz@data
mpsz_count <- left_join(mpsz_data, houses_agg)
mpsz_count$count[is.na(mpsz_count$count)] <- 0
mpsz@data <- mpsz_count
tmap_mode("view")
tm_shape(mpsz) +
tm_fill("count",
style = "quantile",
palette = "Blues",
thres.poly = 0) +
tm_layout(legend.show = FALSE,
title.position = c("center", "center"),
title.size = 20) +
tm_borders(alpha = 0.5)
View(mpsz_count)
houses_agg <- busStop_sf %>% group_by(SUBZONE_N) %>% summarise(count = n())
View(houses_agg)
mpsz_count <- left_join(mpsz_data, houses_agg)
mpsz_count$count[is.na(mpsz_count$count)] <- 0
mpsz@data <- mpsz_count
tmap_mode("view")
tm_shape(mpsz) +
tm_fill("count",
style = "quantile",
palette = "Blues",
thres.poly = 0) +
tm_layout(legend.show = FALSE,
title.position = c("center", "center"),
title.size = 20) +
tm_borders(alpha = 0.5)
houses_agg <- houses_sf %>% group_by(SUBZONE_N) %>% summarise(count = n())
View(houses_agg)
houses_agg <- busStop_sf %>% group_by(SUBZONE_N) %>% summarise(count = n())
packages = c('sf', 'rgdal', 'tidyverse', 'qdapTools', 'spatstat', 'readr', 'raster')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
houses <- read_csv('data/resale-flat-prices/all_flats_updated.csv')
houses <- read_csv('data/resale-flat-prices/finalCSVforplots.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
clinics <- read_csv('data/clinics/clinics.csv')
clinics_sf <- st_as_sf(clinics, coords = c("lon", "lat"))
clinics_sf <- st_set_crs(clinics_sf, 4326)
clinics_sf <- st_transform(clinics_sf, 3414)
clinics
clinics_buffer <- st_buffer(houses_sf, 500)
clinics_in_range <- st_intersection(clinics_buffer, clinics_sf)
length(clinics_in_range)
clinics_buffer <- st_buffer(houses_sf, 1000)
length(clinics_in_range)
length(unique(clinics_in_range$X1))
clinics_buffer <- st_buffer(houses_sf, 500)
clinics_in_range <- st_intersection(clinics_buffer, clinics_sf)
clinics_in_range <- st_intersection(clinics_buffer, clinics_sf)
length(unique(clinics_in_range$X1))
packages = c('sf', 'rgdal', 'tidyverse', 'qdapTools', 'spatstat', 'readr', 'raster')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
houses <- read_csv('data/resale-flat-prices/finalCSVforplots.csv')
houses_sf <- st_as_sf(houses, coords = c("lon", "lat"))
houses_sf <- st_set_crs(houses_sf, 4326)
houses_sf <- st_transform(houses_sf, 3414)
clinics <- read_csv('data/clinics/clinics.csv')
clinics_sf <- st_as_sf(clinics, coords = c("lon", "lat"))
clinics_sf <- st_set_crs(clinics_sf, 4326)
clinics_sf <- st_transform(clinics_sf, 3414)
install.packages('stplanr')
packages = c('sf', 'rgdal', 'tidyverse', 'qdapTools', 'spatstat', 'readr', 'raster', 'stplanr')
for (p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
ny2oaxaca2 <- route_graphhopper("New York", "Oaxaca", vehicle = "car")
cls
clear
help(mapbox)
help(??mapbox)
help(*mapbox*)
help(plotmapbox)
help(ggmap)
library(leaflet
)
df <- data.frame(longitude = runif(10, -97.365268, -97.356546),
latitude = runif(10, 32.706071, 32.712210))
coordinates(df) <- ~longitude+latitude
leaflet(df) %>% addMarkers() %>% addTiles()
leaflet(houses_sf) %>% addMarkers() %>% addTiles()
leaflet(clinics_sf) %>% addMarkers() %>% addTiles()
clinics_sf <- st_set_crs(clinics_sf, 4326)
leaflet(clinics_sf) %>% addMarkers() %>% addTiles()
clinics_sf <- st_transform(clinics_sf, 3414)
leaflet(clinics_sf) %>% addMarkers() %>% addTiles()
tmap_mode('view')
tm_shape(houses_sf[houses_sf$town=="SENGKANG", ]) +
tm_dots(col='min_dist_clinic',
style='quantile',
size=0.1)
tm_shape(houses_sf[houses_sf$town=="SENGKANG", ]) +
tm_dots(col='min_dist_clinic',
style='quantile',
size=0.1)
L.tileLayer.provider('MapBox', {
id: '<insert map_ID here>',
id: 'mapbox.satellite',
L.tileLayer.provider('MapBox', {
id: 'mapbox.satellite',
mpsz <- readOGR(dsn='data/mpsz', layer='MP14_SUBZONE_WEB_PL')
tm_shape(mpsz)+  tm_polygons() +
tm_shape(clinics_sf) + tm_dots(size = 0.01, col = "#7d4627") +
tm_style("classic", bg.color="white") +
tm_view(alpha = 1, basemaps = "Stamen.Watercolor")
tm_shape(mpsz)+  tm_polygons() +
tm_shape(clinics) + tm_dots(size = 0.01, col = "#7d4627") +
tm_style("classic", bg.color="white") +
tm_view(alpha = 1, basemaps = "Stamen.Watercolor")
tm_shape(mpsz)+  tm_polygons() +
tm_shape(clinics_sf) + tm_dots(size = 0.01, col = "#7d4627") +
tm_style("classic", bg.color="white") +
tm_view(alpha = 1, basemaps = "Stamen.Watercolor")
head(clinics_sf)
tm_shape(mpsz)+  tm_polygons() +
tm_style("classic", bg.color="white") +
tm_view(alpha = 1, basemaps = "Stamen.Watercolor")
tm_shape(mpsz)+  tm_polygons() +
tm_style("classic", bg.color="white") +
tm_view(alpha = 1, basemaps = "Thunderforest.Outdoors")
tm_shape(mpsz[mpsz$REGION_N=="NORTH REGION"])+  tm_polygons() +
tm_style("classic", bg.color="white") +
tm_view(alpha = 1, basemaps = "Thunderforest.Outdoors")
tm_shape(mpsz@data[mpsz@data$REGION_N=="NORTH REGION"])+  tm_polygons() +
tm_style("classic", bg.color="white") +
tm_view(alpha = 1, basemaps = "Thunderforest.Outdoors")
tm_shape(mpsz_sf[mpsz_sf$REGION_N=="NORTH REGION"])+  tm_polygons() +
tm_style("classic", bg.color="white") +
tm_view(alpha = 1, basemaps = "Thunderforest.Outdoors")
mpsz_sf <- st_as_sf(mpsz)
tm_shape(mpsz_sf[mpsz_sf$REGION_N=="NORTH REGION"])+  tm_polygons() +
tm_style("classic", bg.color="white") +
tm_view(alpha = 1, basemaps = "Thunderforest.Outdoors")
tm_shape(mpsz_sf[mpsz_sf$REGION_N=="NORTH REGION", ])+  tm_polygons() +
tm_style("classic", bg.color="white") +
tm_view(alpha = 1, basemaps = "Thunderforest.Outdoors")
